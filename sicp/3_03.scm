(define (make-account account password)
  (let ((p password) (sum account))
       (lambda (pass m)
               (if (eq? pass p)
                   (lambda (ac)
                           (cond ((eq? m 'withdraw) (begin (set! sum (+ sum ac)) sum))
                                 ((eq? m 'deposit) 
                                    (if (>= sum ac)
                                        (begin (display 'this) (set! sum (- sum ac)) sum) 
                                        (begin (display 'too-large) sum)))
                                 (else sum)))
                   (lambda (ac) 'error-pass)))))
(define a (make-account 100 '123))
((a '123 'withdraw) 10)
((a '123 'withdraw) 20)
((a '123 'withdraw) 30)
((a '123 'deposit) 10)

                      
