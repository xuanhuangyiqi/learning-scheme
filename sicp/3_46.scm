(define (make-serializer)
  (let ((mutux (make-mutex))
        (lambda (p)
                (define (serialized-p . args)
                        (mutex 'aquire)
                        (let ((val (apply p args)))
                             (mutex 'release)
                             val))
                serialized-p))))
(define (make-mutex)
  (let ((cell (list false)))
       (define (the-mutex m)
               (cond ((eq? m 'aquire) 
                      (if (test-and-set! cell)
                          (the-mutex 'aquire)))
                     ((eq? m 'release) (clear! cell))))
       the-mutex ))

(define (test-and-set! cell)
  (if (car cell)
      true
      (begin (set-car! cell true)
             false)))
